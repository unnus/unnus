<!-- peg -->

<style>
  #resetBtn{
   display: inline-block;
   width: 30px;
   height: 30px;
   background: #00000013;
   text-align: center;
   line-height: 2;
   border-radius: 50%;
   cursor: pointer;
   margin: 5px;
   transition: .2s;
 }
 #resetBtn:active{
   transform: scale(0.8) rotate(200deg);
 }

 body{
   font-family: system-ui;
 }

 .appbar{
   width: 100%;
   justify-content: space-between;
   align-items: center;
   display: flex;
 }
#scorecard {
 max-width: 700px;
 margin: 50px auto;
 box-shadow: 0 10px 10px rgba(25,37,52,.10), 5px 2px 30px rgba(25,37,52,1%);
 padding:20px;
 background:rgba(0,0,0,.011)
}

table {
 border-collapse: collapse;
 width: 100%;
}
span.add-span {
   display: inline-block;
   width: 80%;
   background: #00000012;
   height: 10px;
   border-radius: 12px;
   cursor: pointer;
}
.iconPlus{
   margin-right: 5px;
   svg{
       transform:translateY(3px);
        stroke: #8f8f8f;
   }

}

th,
td {
 text-align: left;
 border:1px solid rgba(131, 131, 131, 0.1);
 padding: 8px;
}

th {
}

tr:nth-child(even) {
}

input[type="number"] {
 width: 50px;
}

input[type="text"] {
 width: 200px;
}

#overall-score {
 font-weight: bold;
 font-size: 18px;
}
/* #get-results-button{
 margin: 5px;
 padding: 20px;
 font-weight: bold;
 outline:none;
 border:none;
 cursor: pointer;
 background-color: black;
 color:white;
 width: 150px;
 height: 57px;
 box-shadow: 0 10px 10px rgba(25,37,52,.10), 5px 2px 30px rgba(25,37,52,1%);
} */

#get-results-button {
 box-shadow: 0 10px 10px rgba(25,37,52,.10), 5px 2px 30px rgba(25,37,52,1%);

 margin-top: 10px;
 background: #000;
 border: none;
 color: white;
 cursor: pointer;
 display: inline-block;
 font-size: 1.1em;
 height: 3.2rem;
 line-height: 1.6rem;
 outline: 0;
 padding: .7rem 1.5rem;
 text-align: center;
 text-decoration: none;
 user-select: none;
 vertical-align: middle;
 white-space: nowrap;
}

.loading {
 color: transparent !important;
 min-height: 1.6rem;
 pointer-events: none;
 position: relative;

 &::after {
   animation: loading 500ms infinite linear;
   border: .2rem solid white;
   border-radius: .8rem;
   border-right-color: transparent;
   border-top-color: transparent;
   content: "";
   display: block;
   height: 1.2rem;
   left: 50%;
   margin-left: -.8rem;
   margin-top: -.8rem;
   position: absolute;
   top: 50%;
   width: 1.2rem;
 }
}

@keyframes loading {
 0% {
   transform: rotate(0deg);
 }
 100% {
   transform: rotate(360deg);
 }
}

#get-results-button svg{
   transform: translate(5px,2px);
   transition: .2s;
 }
 #get-results-button:hover svg{transform: translate(10px,2px)}


</style>
<div id="scorecard">
<img class="tool-logo-unnus" src="https://i.ibb.co/8xHbQy7/logo-2.png" alt="unnus healthcare branding agency">
<div class="appbar">
<h2>Patient Engagement Gauge</h2>
<div class="reset">
<span id="resetBtn">
<svg width="16" height="14" viewBox="0 0 16 14" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15.263 1.81352V5.70343H11.3731" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M1 12.1866V8.29665H4.88991" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M2.62728 5.05505C2.95609 4.12587 3.51491 3.29512 4.25162 2.64033C4.98833 1.98554 5.8789 1.52804 6.84024 1.31052C7.80158 1.09301 8.80235 1.12257 9.74918 1.39644C10.696 1.67031 11.558 2.17957 12.2548 2.87669L15.263 5.70336M1 8.29664L4.0082 11.1233C4.70498 11.8204 5.567 12.3297 6.51383 12.6036C7.46065 12.8774 8.46143 12.907 9.42277 12.6895C10.3841 12.472 11.2747 12.0145 12.0114 11.3597C12.7481 10.7049 13.3069 9.87414 13.6357 8.94496" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

</span> <span>Reset</span>
</div>
</div>
<table>
<tr>
<th>Metric</th>
<th>Weight</th>
<th>Score</th>
<th>Weighted Score</th>
</tr>
<tr>
<td>Patient Satisfaction <span class="removeMetric" style="cursor: pointer;float:right">&#10006;</span></td>
<td><input type="number" class="weight" min="0" max="100" value="40"></td>
<td><input type="number" class="score" min="0" max="100" value="80"></td>
<td><span class="weighted-score"></span></td>
</tr>
<tr>
<td>Appointment Attendance <span class="removeMetric" style="cursor: pointer;float:right">&#10006;</span></td>
<td><input type="number" class="weight" min="0" max="100" value="20"></td>
<td><input type="number" class="score" min="0" max="100" value="90"></td>
<td><span class="weighted-score"></span></td>
</tr>
<tr>
<td>Medication Adherence <span class="removeMetric" style="cursor: pointer;float:right">&#10006;</span></td>
<td><input type="number" class="weight" min="0" max="100" value="30"></td>
<td><input type="number" class="score" min="0" max="100" value="75"></td>
<td><span class="weighted-score"></span></td>
</tr>
<tr>
<td>Self-Management Skills <span class="removeMetric" style="cursor: pointer;float:right">&#10006;</span></td>
<td><input type="number" class="weight" min="0" max="100" value="10"></td>
<td><input type="number" class="score" min="0" max="100" value="60"></td>
<td><span class="weighted-score"></span></td>
</tr>

<tr id="custom-row" style="display: none">
<td><input type="text" class="custom-metric" placeholder="Enter custom metric"></td>
<td><input type="number" class="weight" min="0" max="100" value=""></td>
<td><input type="number" class="score" min="0" max="100" value=""></td>
<td><span class="weighted-score"></span></td>
</tr>
<tr id="addi">

<td><span class="iconPlus">
<svg width="18" height="16" viewBox="0 0 18 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.62406 1V15M1.14069 8H16.1074" stroke="#7b7b7b" stroke-opacity="0.51" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</span><span class="add-span"></span></td>
<td><span class="add-span"></span></td>
<td><span class="add-span"></span></td>
<td><span class="add-span"></span></td>
</tr>
<tr>
<td colspan="3">Overall Score:</td>
<td><span id="overall-score"></span></td>
</tr>
</table>
<button id="get-results-button"><span>Get Results</span> <svg id="loadSvgBtn" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1 8H15" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M8 1L15 8L8 15" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</button>
</div>

<script>


// Get all the input elements
const weights = document.querySelectorAll(".weight");
const scores = document.querySelectorAll(".score");
const weightedScores = document.querySelectorAll(".weighted-score");
const addButton = document.querySelector("#addi");
const getResultsButton = document.querySelector("#get-results-button");


const resetButton = document.getElementById("resetBtn");

// Add event listener to the reset button
resetButton.addEventListener("click", () => {
 // Get all input elements
 const inputElements = document.querySelectorAll("input, .weighted-score");

 // Loop through each input element and set its value to an empty string
 inputElements.forEach((element) => {
   if (element.tagName === "INPUT") {
     element.value = "";
   } else if (element.classList.contains("weighted-score")) {
     element.textContent = "0.00";
   }
 });
 // Reset overall score to 0
 document.getElementById("overall-score").textContent = "0.00";
});


// Calculate the weighted score for each row


function calculateRowWeightedScore(row) {
 const weightInput = row.querySelector(".weight");
 const scoreInput = row.querySelector(".score");

 if (weightInput && scoreInput) {
   const weight = Number(weightInput.value) / 100;
   const score = Number(scoreInput.value);
   const weightedScore = (weight * score).toFixed(2);
   row.querySelector(".weighted-score").textContent = weightedScore;
   return Number(weightedScore);
 }

 // Return 0 for rows without weight and score inputs
 return 0;
}

// Calculate the overall score
// Calculate the overall score
function calculateOverallScore() {
 let totalWeightedScore = 0;
 let totalWeight = 0;
 const rows = document.querySelectorAll("tr:not(:last-child)");

 rows.forEach((row) => {
   const weightedScore = calculateRowWeightedScore(row);
   totalWeightedScore += weightedScore;

   // Check if the row has weight input before adding to totalWeight
   const weightInput = row.querySelector(".weight");
   if (weightInput) {
     totalWeight += Number(weightInput.value);
   }
 });

 const overallScore = totalWeight !== 0 ? (totalWeightedScore / totalWeight * 100).toFixed(2) : 0;
 document.getElementById("overall-score").textContent = overallScore + "%";
}
// Calculate the overall score when the "Get Results" button is clicked
getResultsButton.addEventListener("click", function() {
 document.getElementById("loadSvgBtn").style.display = "none";
 var _this = this;
  _this.classList.add('loading');
 setTimeout(function () {
   _this.classList.remove('loading');
   document.getElementById("loadSvgBtn").style.display = "inline-block";
   calculateOverallScore();
 }, 500);
 
});

// Add custom row when Add button is clicked
addButton.addEventListener("click", () => {
 const tableBody = document.querySelector("tbody");
 const overallScoreRow = document.getElementById("overall-score").closest("tr");
 const newRow = document.createElement("tr");
 let addi = document.getElementById('addi')
 newRow.innerHTML = `
   <td><input type="text" placeholder='Metric name' class="metric-input"></td>
   <td><input type="number" class="weight" min="0" max="100" value="0"></td>
   <td><input type="number" class="score" min="0" max="100" value="0"></td>
   <td><span class="weighted-score">0</span></td>
 `;
 tableBody.insertBefore(newRow, addi);
 // Add event listener to the new metric input for handling custom metric display
 const newMetricInput = newRow.querySelector(".metric-input");
 newMetricInput.addEventListener("blur", () => {
   const metricValue = newMetricInput.value.trim();
   console.log(metricValue.length)
   if(metricValue.length){
       newMetricInput.parentElement.innerHTML = `${metricValue}` + `<span class="removeMetric" style="cursor: pointer;float:right">&#10006;</span> `;
   }else{
       tableBody.removeChild(newRow);
   }
 });
});

// remove metric
// Function to remove a row
function removeRow(row) {
 const tableBody = document.querySelector("tbody");
 tableBody.removeChild(row);
 calculateOverallScore(); // Recalculate overall score after removal
}

// Event listener for the entire table to handle removeMetric clicks
document.querySelector("table").addEventListener("click", (event) => {
 const clickedElement = event.target;

 // Check if the clicked element has the class removeMetric
 if (clickedElement.classList.contains("removeMetric")) {
   // Find the parent row and remove it
   const row = clickedElement.closest("tr");
   removeRow(row);
 }
});



 </script>
   


<!-- peg -->